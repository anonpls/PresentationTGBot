import asyncio
import time
import aiohttp
import os
import config
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv

load_dotenv()

DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

API_KEY = os.getenv("API_KEY")
TG_TOKEN = os.getenv("TG_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
API_URL = "https://api.slidesgpt.com/v1"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

bot = Bot(token=TG_TOKEN)
dp = Dispatcher()
greeted_users = set()

async def download_presentation(session, presentation_id, file_format):
    url = f"{API_URL}/presentations/{presentation_id}/download"
    async with session.get(url, headers={"Authorization": f"Bearer {API_KEY}"}) as resp:
        if resp.status == 200:
            content = await resp.read()
            filename = os.path.join(DOWNLOAD_DIR, f"presentation-{presentation_id}.{file_format}")
            with open(filename, "wb") as f:
                f.write(content)
            return filename
        else:
            print(f"–û—à–∏–±–∫–∞: {resp.status}")
            return None
        
async def cleanup_old_files():
    while True:
        now = time.time()
        for filename in os.listdir(DOWNLOAD_DIR):
            filepath = os.path.join(DOWNLOAD_DIR, filename)
            if os.path.isfile(filepath):
                file_age = now - os.path.getmtime(filepath)
                if file_age > config.CLEANUP_MINUTES * 60:
                    try:
                        os.remove(filepath)
                        print(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {filename}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {filename}: {e}")
        await asyncio.sleep(config.CLEANUP_MINUTES * 60)

@dp.message(Command("generate"))
async def handle_generate(message: Message):
    prompt = message.text.replace("/generate", "").strip()
    if not prompt:
        await message.answer("–£–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/generate —Ç–≤–æ—è —Ç–µ–º–∞`", parse_mode=ParseMode.MARKDOWN_V2)
        return

    await message.answer(
        f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É: *{prompt}*\\.\\.\\.\n"
        "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 2\\-3 –º–∏–Ω—É—Ç—ã ‚è≥",
        parse_mode=ParseMode.MARKDOWN_V2
        )

    payload = {
        "prompt": prompt,
        "format": config.FORMAT
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/presentations/generate", headers=headers, json=payload) as resp:
            try:
                data = await resp.json()
            except:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é.")
                return

            presentation_id = data.get("id")
            if not presentation_id:
                await message.answer("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
                return

            await bot.send_message(ADMIN_ID, f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Å–æ–∑–¥–∞–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
            # await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª")

            file_path = await download_presentation(session, presentation_id, "pptx")
            if file_path:
                await message.answer_document(
                    types.FSInputFile(file_path), caption=f"–ì–æ—Ç–æ–≤–æ: {prompt} üìàüéâ\n"
                    "–ñ–¥—ë–º —Ç–µ–±—è –µ—â—ë! üë®‚Äçüíª",
                    parse_mode=ParseMode.MARKDOWN)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    greeted_users.add(message.from_user.id)
    await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É\\.\n"
            "–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "`/generate –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ –ò–ò`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
       
@dp.message()
async def handle_any_message(message: types.Message):
    if message.from_user.id not in greeted_users:
        greeted_users.add(message.from_user.id)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É\\.\n"
            "–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "`/generate –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ –ò–ò`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await message.answer(
            "–ù–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è üôÇ\n"
            "–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "`/generate –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ –ò–ò`",
            parse_mode=ParseMode.MARKDOWN_V2
        )

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))